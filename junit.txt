public class Calculator {

	public int square(int i) 
	{
		
	return i*i;
	}

	public String user(String string) 
	{
		
		return "sandip";
	}

	public String concat(String string, String string2) {
		
		return string+string2;
	}

	public int sub(int i, int j) {
		// TODO Auto-generated method stub
		return i-j;
	}

	public int add(int i, int j) {
		// TODO Auto-generated method stub
		return i+j;
	}

	public static boolean isSafe() {
		// TODO Auto-generated method stub
		return false;
	}

}
-------------------------------------------------

//A unit test is a piece of code written by a developer that executes a specific functionality in the code to be tested.
import static org.junit.Assert.*;
import org.junit.Test;
public class CalculatorTest 
{
	Calculator cal=new Calculator();
	@Test  //Used to identify that a method is a test method

	public void testSquares()
	{
		
		assertEquals(25,cal.square(5));
		assertEquals(5*5,cal.square(5));
		
	}
	
	@Test
	public void testUser()
	{
		assertEquals("sandip",cal.user("sandip"));
	}
	
	@Test
	public void stringtest()
	{
	String result = cal.concat("Hello", "World");
	assertEquals("HelloWorld", result);
	String s1="Hello";
	String s2="Hello";
	assertSame(s1,s2); 
	}
	
	
}
-----------------------------------------------------------------------------------------
import static org.junit.Assert.*;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class CalculatorTest1 {
	Calculator c=null;
	
	@Before  //It is used to call the annotated function before running each of the tests

	public void before()
	{
	System.out.println("Before Test");
	 c=new Calculator();
	}
	@After  //It is used to call the annotated function after each test method
	public void after()
	{               
	 System.out.println("After Test"); 	}

	@Test //Used to identify that a method is a test method

	public void testAdd() {
	System.out.println("Add function");
	assertEquals("Result",5,c.add(2,3));
	assertTrue (Calculator.isSafe()); 
	assertFalse(Calculator.isSafe());
	}
	@Test  //Used to identify that a method is a test method

	public void testSub() {
	System.out.println("Sub function");
	assertEquals("Result",20,c.sub(100,80));
	}
	//It defines a timeout period in miliseconds with “timeout” parameter
	//The test fails when the timeout period exceeds. 

	@Test (timeout = 1000)
	public void testinfinity() 
	{
		while (true);
	}
	

}
-----------------------------------------------

import org.junit.Test; 
import static org.junit.Assert.*;  
public class TestAssertions 
{ 
 @Test    public void testAssertions()
 {       
//test data   
    String str1 = new String ("abc"); 
      String str2 = new String ("abc");   
    String str3 = null;    
   String str4 = "abc";   
    String str5 = "abc";     
  int val1 = 5;     
  int val2 = 6;       
String[] expectedArray = {"one", "two", "three"};      
 String[] resultArray =  {"one", "two", "three"};  
      //Check that two objects are equal     
  assertEquals(str1, str2);  
      //Check that a condition is true      
 assertTrue (val1 < val2);  
      //Check that a condition is false    
   assertFalse(val1 > val2);  
      //Check that an object isn't null      
 assertNotNull(str1);  
      //Check that an object is null      
 assertNull(str3);  
      //Check if two object references point to the same object      
 assertSame(str4,str5);  
      //Check if two object references not point to the same object   
    assertNotSame(str1,str3);  
      //Check whether two arrays are equal to each other.      
 assertArrayEquals(expectedArray, resultArray);   
 } 
} 
-------------------------


import org.junit.runner.JUnitCore; 
import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;  
public class TestRunner2
 {  
  public static void main(String[] args)
 {     
  Result result = JUnitCore.runClasses(TestAssertions.class); 
      for (Failure failure : result.getFailures()) 
{         
 System.out.println(failure.toString());  
     }     
  System.out.println(result.wasSuccessful());  
  } 
}  

-----------------------------------------------
/* * This class prints the given message on console. */ 
public class MessageUtil 
{  
   private String message;  
   //Constructor    
//@param message to be printed   
 public MessageUtil(String message)
{     
  this.message = message;   
  }  
   // prints the message  
  public void printMessage()
{   
   System.out.println(message);    
   return message;    
}     
   // add "Hi!" to the message   
public String salutationMessage()
{      
 message = "Hi!" + message;    
   System.out.println(message);  
     return message;   
 }
    }

------------------------------
import org.junit.Test; 
import org.junit.Ignore;
 import static org.junit.Assert.assertEquals;  
public class TestJunit1 
{ 
 String message = "Robert"; 
    MessageUtil messageUtil = new MessageUtil(message); 
       @Test
    public void testPrintMessage() 
{       
 System.out.println("Inside testPrintMessage()");          
 assertEquals(message, messageUtil.printMessage());    
     } 
}
------------------------------------------------------
import org.junit.Test;
 import org.junit.Ignore; 
import static org.junit.Assert.assertEquals;  
public class TestJunit2 
{  
   String message = "Robert";    
 MessageUtil messageUtil = new MessageUtil(message);   
   @Test   
 public void testSalutationMessage() 
{      
 System.out.println("Inside testSalutationMessage()");     
  message = "Hi!" + "Robert";    
   assertEquals(message,messageUtil.salutationMessage());  
  }
 } 

----------------------------------------

import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 @RunWith(Suite.class) 
@Suite.SuiteClasses({    TestJunit1.class,    TestJunit2.class }) 
public class JunitTestSuite
 {    }   
------------------------------------------------
import org.junit.runner.JUnitCore;
 import org.junit.runner.Result;
 import org.junit.runner.notification.Failure;  
public class TestRunner 
{ 
 public static void main(String[] args) 
{
       Result result = JUnitCore.runClasses(JunitTestSuite.class);
       for (Failure failure : result.getFailures())
 {    
      System.out.println(failure.toString());  
     } 
      System.out.println(result.wasSuccessful()); 
   }
 }
---------------------------------------------- 